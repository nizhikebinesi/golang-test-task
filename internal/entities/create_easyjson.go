// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entities

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson267ce010DecodeGolangTestTaskInternalEntities(in *jlexer.Lexer, out *CreateAdAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(int)
				}
				*out.ID = int(in.Int())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson267ce010EncodeGolangTestTaskInternalEntities(out *jwriter.Writer, in CreateAdAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.ID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateAdAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson267ce010EncodeGolangTestTaskInternalEntities(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateAdAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson267ce010EncodeGolangTestTaskInternalEntities(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateAdAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson267ce010DecodeGolangTestTaskInternalEntities(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateAdAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson267ce010DecodeGolangTestTaskInternalEntities(l, v)
}
func easyjson267ce010DecodeGolangTestTaskInternalEntities1(in *jlexer.Lexer, out *AdJSONItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "price":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Price).UnmarshalJSON(data))
			}
		case "image_urls":
			if in.IsNull() {
				in.Skip()
				out.ImageURLs = nil
			} else {
				in.Delim('[')
				if out.ImageURLs == nil {
					if !in.IsDelim(']') {
						out.ImageURLs = make([]string, 0, 4)
					} else {
						out.ImageURLs = []string{}
					}
				} else {
					out.ImageURLs = (out.ImageURLs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ImageURLs = append(out.ImageURLs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson267ce010EncodeGolangTestTaskInternalEntities1(out *jwriter.Writer, in AdJSONItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Raw((in.Price).MarshalJSON())
	}
	{
		const prefix string = ",\"image_urls\":"
		out.RawString(prefix)
		if in.ImageURLs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.ImageURLs {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdJSONItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson267ce010EncodeGolangTestTaskInternalEntities1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdJSONItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson267ce010EncodeGolangTestTaskInternalEntities1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdJSONItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson267ce010DecodeGolangTestTaskInternalEntities1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdJSONItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson267ce010DecodeGolangTestTaskInternalEntities1(l, v)
}
